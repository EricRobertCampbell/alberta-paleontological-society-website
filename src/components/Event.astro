---
import { generateEventDateTimeString } from "../utility";
import type { EventFrontmatter } from "../content/config";
import { splitIsoString } from '../utility/dates'
interface Props {
	frontmatter: EventFrontmatter;
	last: boolean;
	id?: string;
	showPermalink?: boolean;
	slug?: string;
}
const { frontmatter, last, id, showPermalink = false, slug } = Astro.props;
const { title, startDate, startTime, endDate, endTime, type, image, start, end, host, detailsLink } =
	frontmatter;
const actualStartDate = start ? splitIsoString(start).date : startDate;
const actualEndDate = end ? splitIsoString(end).date : endDate;
const eventDateTimeString = generateEventDateTimeString(
{
start,
end,
startDate,
startTime,
endDate,
endTime
}
);
---

<section
	id={id}
	class:list={last ? [] : ["not-last"]}
	data-startdate={actualStartDate}
	data-enddate={actualEndDate ? actualEndDate : actualStartDate}
	data-type="event"
>
	<div class="event-header">
		<div>
			<p class="event-type">
				{type}{host ? ` - hosted by ${host}` : ""}
			</p>
			<h3 class="event-title">{title}</h3>
			<p class="event-time">
				{eventDateTimeString}
			</p>
		</div>
		{showPermalink && slug && (
			<a href={`/events/stable/${slug}`} class="permalink-button">
				Permalink
			</a>
		)}
	</div>
	{
		image && (
			<figure class="hero-figure">
				<img
					class="event-hero-image"
					src={image.src}
					alt={image.alt}
				/>
				{image.attribution && (
					<figcaption>{image.attribution}</figcaption>
				)}
			</figure>
		)
	}
	<div class="content-container">
		<slot />
	</div>
		{
		detailsLink ? <p>

				For more details, see 
				<a href={detailsLink}>
					{
						detailsLink
					}
			</a>.</p> : null
		}
	</div>
</section>

<style>
	.event-header {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		gap: calc(2 * var(--theme-spacing-base));
	}

	.permalink-button {
		font-size: 0.875rem;
		padding: calc(0.5 * var(--theme-spacing-base)) var(--theme-spacing-base);
		border: solid calc(0.5 * var(--theme-spacing-base)) var(--accent-colour-medium);
		border-radius: var(--border-radius-medium);
		text-decoration: none;
		background-image: none;
		background: none;
		white-space: nowrap;
		align-self: flex-start;
	}

	.permalink-button:hover {
		background-color: var(--background-colour-darker);
		border-color: var(--accent-colour-dark);
	}

	.hero-figure {
		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		margin: 0;
	}
	.event-hero-image {
		max-width: 60%;
		height: auto;
	}
	section.not-last {
		margin: 3px 0px;
		margin-bottom: 8px;
		border-bottom: solid 1px black;
	}
	p.event-type {
		color: var(--accent-colour-dark);
		margin-bottom: 0px;
		font-size: 0.75rem;
	}
	.event-title {
		margin-top: var(--theme-spacing-base);
		margin-bottom: calc(var(--theme-spacing-base));
	}
	.event-time {
		color: var(--accent-colour-medium);
		font-size: 1rem;
		margin: var(--theme-spacing-base) 0;
	}
	figcaption {
		font-size: 0.5rem;
	}
</style>
