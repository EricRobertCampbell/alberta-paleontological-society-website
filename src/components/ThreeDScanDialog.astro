---
import Button from './Button.astro'

interface Props {
	accessionNumber: string;
    description: string;
	filename: string;
	attribution: string;
}

const {accessionNumber, filename, attribution, description} = Astro.props;
const filenameIdentifier = filename.replace(/\./g, '-')
---

<dialog id={`three-d-scan-dialog-${filenameIdentifier}`}>
<div id="innerContainer">
    <form method="dialog">
        <Button>&#x2715;</Button>
    </form>
    <h2>{accessionNumber.toUpperCase()} - {description}</h2>
    <canvas />
    <p>Attribution: {attribution}</p>
</div>
</dialog>
<Button data-identifier="three-d-scan-open-button" data-filename={filename}>
	Open 
</Button>


<script>
import * as THREE from 'three'
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader'
import { OrbitControls } from 'three/addons/controls/OrbitControls'

interface DisplayScanParameters {
    filename: string;
    attribution: string;
    canvas: HTMLCanvasElement;
}
const displayScan = ({
    filename,
    attribution,
    canvas,
}: DisplayScanParameters) => {
    const scene = new THREE.Scene(new THREE.Color())
    /* scene.background = new THREE.Color( 0xD2B48C ); */
    const sizes = {
        width: canvas.offsetWidth,
        height: canvas.offsetHeight,
        ratio: canvas.offsetWidth / canvas.offsetHeight,
    }
    const camera = new THREE.PerspectiveCamera(75, sizes.ratio, 0.01, 1000)
    scene.add(camera) // required in this case since the camera will have a child

    // ambient
    scene.add(new THREE.AmbientLight(0xffffff, 0.5)) // optional

    // light
    const light = new THREE.PointLight(0xffffff, 0.5, 0, 1)
    camera.add(light)

    const renderer = new THREE.WebGLRenderer({ alpha: true, canvas })
    renderer.setClearColor(0xffffff, 0)
    renderer.setSize(sizes.width, sizes.height)
    // container.appendChild(renderer.domElement)

    const controls = new OrbitControls(camera, renderer.domElement)
    //controls.update() must be called after any manual changes to the camera's transform
    camera.position.set(1, 1, 1)
    controls.update()

    const loader = new GLTFLoader()
    // Load a glTF resource
    const actualFilename = `/fossilCollection/3dScans/${filename}`
    loader.load(
        // resource URL
        actualFilename,
        // called when the resource is loaded
        function (gltf) {
            //console.log('Successfully loaded glb file', gltf)
            /* const root = gltf.scene */
            /* root.scale.set(0.1, 0.1, 0.1) */
            /* scene.add(root); */

            const model = gltf.scene
            /* model.scale.set(10, 10, 10) */
            scene.add(model)

            // Compute the bounding box of the model
            const box = new THREE.Box3().setFromObject(model)

            // Calculate the center and size of the bounding box
            const center = box.getCenter(new THREE.Vector3())
            const size = box.getSize(new THREE.Vector3())

            // Center the model
            model.position.sub(center)

            // Set the camera position based on the bounding box size
            const maxDim = Math.max(size.x, size.y, size.z)
            const fov = camera.fov * (Math.PI / 180)
            let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2))

            // Add a bit of extra space around the model (optional)
            /* cameraZ *= 1.25; */

            camera.position.set(0.1, 0.1, 0.1)
            camera.lookAt(new THREE.Vector3(0, 0, 0))

            // Update the camera and renderer
            camera.updateProjectionMatrix()
            controls.update()
            renderer.render(scene, camera)

        },
        // called while loading is progressing
        function (xhr) {
            //console.log((xhr.loaded / xhr.total) * 100 + '% loaded')
        },
        // called when loading has errors
        function (error) {
            console.error('An error happened', e)
        }
    )

    function animate() {
        controls.update()
        renderer.render(scene, camera)
    }
    renderer.setAnimationLoop(animate)
}
const openModal = (id: string) => {
	//console.log('in openModal')
	modal = document.getElementById(id)
	if (modal) {
		modal.showModal();
	}
}

document.querySelectorAll('button[data-identifier=three-d-scan-open-button]').forEach(button => {
	//console.log('adding listener to ', button)
	const filename = button.dataset.filename;
		button.addEventListener('click', () => {
			const modalIdentifier = filename.replace(/\./g, '-')
			const modal = document.querySelector(`dialog#three-d-scan-dialog-${modalIdentifier}`)
			if (modal) {
                const canvas = modal.querySelector('canvas')
                if (!canvas) {
                    console.error('No canvas found in modal!')
                    return
                }
                modal.showModal()
				displayScan({
					filename,
					attribution: 'test',
                    canvas,
				})
				} else {
					console.error('No modal found! Not able to render 3D scan.')
				}
		});
})
</script>

<style>
    dialog {
        width: 90vw;
        height: 90vh;
        background-color: var(--background-colour-medium);
        border-radius: var(--border-radius-medium);
        border: solid calc(0.5 * var(--theme-spacing-base)) var(--accent-colour-dark);
    }
    dialog form {
        align-self: flex-end;
    }
    div#innerContainer {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
    }
    canvas {
        width: 100%;
        height: 100%;
    }
</style>

